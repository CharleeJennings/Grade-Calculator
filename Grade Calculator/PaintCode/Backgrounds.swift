//
//  Backgrounds.swift
//  ProjectName
//
//  Created by Charles on 11/22/17.
//  Copyright Â© 2017 ACL. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class Backgrounds : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawBackgroundCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.000, green: 0.608, blue: 0.839, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.537, green: 1.000, blue: 0.753, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.008, green: 0.729, blue: 1.000, alpha: 1.000)
        let gradientColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let gradientColor5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.500)

        //// Gradient Declarations
        let linearGradient1 = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor.blended(withFraction: 0.5, of: gradientColor2).cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 0.46, 1])!
        let linearGradient4 = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 1])!
        let linearGradient2 = CGGradient(colorsSpace: nil, colors: [gradientColor4.cgColor, gradientColor5.cgColor] as CFArray, locations: [0, 1])!

        //// Main-Story
        //// Introduction-page
        //// Background 2
        //// Rectangle
        //// Group 5
        //// path-3 Drawing
        let path3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        context.saveGState()
        path3Path.addClip()
        context.drawLinearGradient(linearGradient1,
            start: CGPoint(x: 375, y: 306.26),
            end: CGPoint(x: 0, y: 0),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- Drawing
        let pathPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        context.saveGState()
        pathPath.addClip()
        context.drawLinearGradient(linearGradient2,
            start: CGPoint(x: 187.5, y: 0),
            end: CGPoint(x: 187.5, y: 812),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Group 6
        context.saveGState()
        context.setAlpha(0.61)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// path-5 Drawing
        let path5Path = UIBezierPath()
        path5Path.move(to: CGPoint(x: 0, y: 182.88))
        path5Path.addCurve(to: CGPoint(x: 187.5, y: 383.8), controlPoint1: CGPoint(x: 25.96, y: 200.35), controlPoint2: CGPoint(x: 88.46, y: 267.32))
        path5Path.addCurve(to: CGPoint(x: 375, y: 812), controlPoint1: CGPoint(x: 286.54, y: 500.29), controlPoint2: CGPoint(x: 349.04, y: 643.02))
        path5Path.addLine(to: CGPoint(x: 0, y: 812))
        path5Path.addLine(to: CGPoint(x: 0, y: 182.88))
        path5Path.close()
        path5Path.usesEvenOddFillRule = true
        context.saveGState()
        path5Path.addClip()
        context.drawLinearGradient(linearGradient4,
            start: CGPoint(x: 375, y: 812),
            end: CGPoint(x: 0, y: 182.88),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.move(to: CGPoint(x: 0, y: 182.88))
        path2Path.addCurve(to: CGPoint(x: 187.5, y: 383.8), controlPoint1: CGPoint(x: 25.96, y: 200.35), controlPoint2: CGPoint(x: 88.46, y: 267.32))
        path2Path.addCurve(to: CGPoint(x: 375, y: 812), controlPoint1: CGPoint(x: 286.54, y: 500.29), controlPoint2: CGPoint(x: 349.04, y: 643.02))
        path2Path.addLine(to: CGPoint(x: 0, y: 812))
        path2Path.addLine(to: CGPoint(x: 0, y: 182.88))
        path2Path.close()
        path2Path.usesEvenOddFillRule = true
        context.saveGState()
        path2Path.addClip()
        context.drawLinearGradient(linearGradient2,
            start: CGPoint(x: 187.5, y: 182.88),
            end: CGPoint(x: 187.5, y: 812),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 7
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// path-6 Drawing
        let path6Path = UIBezierPath()
        path6Path.move(to: CGPoint(x: 143.28, y: 576.56))
        path6Path.addCurve(to: CGPoint(x: 375, y: 428), controlPoint1: CGPoint(x: 201.17, y: 517.28), controlPoint2: CGPoint(x: 278.41, y: 467.76))
        path6Path.addLine(to: CGPoint(x: 375, y: 812))
        path6Path.addLine(to: CGPoint(x: 0, y: 812))
        path6Path.addCurve(to: CGPoint(x: 143.28, y: 576.56), controlPoint1: CGPoint(x: 37.63, y: 714.32), controlPoint2: CGPoint(x: 85.39, y: 635.85))
        path6Path.close()
        path6Path.usesEvenOddFillRule = true
        context.saveGState()
        path6Path.addClip()
        context.drawLinearGradient(linearGradient4,
            start: CGPoint(x: 375, y: 812),
            end: CGPoint(x: 0, y: 428),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- 4 Drawing
        let path4Path = UIBezierPath()
        path4Path.move(to: CGPoint(x: 143.28, y: 576.56))
        path4Path.addCurve(to: CGPoint(x: 375, y: 428), controlPoint1: CGPoint(x: 201.17, y: 517.28), controlPoint2: CGPoint(x: 278.41, y: 467.76))
        path4Path.addLine(to: CGPoint(x: 375, y: 812))
        path4Path.addLine(to: CGPoint(x: 0, y: 812))
        path4Path.addCurve(to: CGPoint(x: 143.28, y: 576.56), controlPoint1: CGPoint(x: 37.63, y: 714.32), controlPoint2: CGPoint(x: 85.39, y: 635.85))
        path4Path.close()
        path4Path.usesEvenOddFillRule = true
        context.saveGState()
        path4Path.addClip()
        context.drawLinearGradient(linearGradient2,
            start: CGPoint(x: 187.5, y: 428),
            end: CGPoint(x: 187.5, y: 812),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTableBackgroundCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 724), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 724), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 724)


        //// Color Declarations
        let gradientColor2 = UIColor(red: 0.537, green: 1.000, blue: 0.753, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.008, green: 0.729, blue: 1.000, alpha: 1.000)
        let gradientColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let gradientColor5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.500)

        //// Gradient Declarations
        let linearGradient = CGGradient(colorsSpace: nil, colors: [gradientColor4.cgColor, gradientColor5.cgColor] as CFArray, locations: [0, 1])!
        let linearGradient3 = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Main-Story
        //// Subject-TableView-Empty-Subject
        //// TableBackground
        //// Rectangle
        //// Group 5
        //// path-3 Drawing
        let path3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812.16))
        context.saveGState()
        path3Path.addClip()
        context.drawLinearGradient(linearGradient3,
            start: CGPoint(x: 375, y: 812.16),
            end: CGPoint(x: 0, y: 0),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- Drawing
        let pathPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812.16))
        context.saveGState()
        pathPath.addClip()
        context.drawLinearGradient(linearGradient,
            start: CGPoint(x: 187.5, y: 0),
            end: CGPoint(x: 187.5, y: 812.16),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()




        //// Group 6
        context.saveGState()
        context.setAlpha(0.81)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// path-4 Drawing
        let path4Path = UIBezierPath()
        path4Path.move(to: CGPoint(x: 0, y: 248.53))
        path4Path.addCurve(to: CGPoint(x: 232.47, y: 299.61), controlPoint1: CGPoint(x: 115.44, y: 286.38), controlPoint2: CGPoint(x: 192.93, y: 303.41))
        path4Path.addCurve(to: CGPoint(x: 375, y: 248.53), controlPoint1: CGPoint(x: 272.01, y: 295.82), controlPoint2: CGPoint(x: 319.52, y: 278.79))
        path4Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path4Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path4Path.addLine(to: CGPoint(x: 0, y: 248.53))
        path4Path.close()
        path4Path.usesEvenOddFillRule = true
        context.saveGState()
        path4Path.addClip()
        context.drawLinearGradient(linearGradient3,
            start: CGPoint(x: 375, y: 812.16),
            end: CGPoint(x: 0, y: 248.53),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.move(to: CGPoint(x: 0, y: 248.53))
        path2Path.addCurve(to: CGPoint(x: 232.47, y: 299.61), controlPoint1: CGPoint(x: 115.44, y: 286.38), controlPoint2: CGPoint(x: 192.93, y: 303.41))
        path2Path.addCurve(to: CGPoint(x: 375, y: 248.53), controlPoint1: CGPoint(x: 272.01, y: 295.82), controlPoint2: CGPoint(x: 319.52, y: 278.79))
        path2Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path2Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path2Path.addLine(to: CGPoint(x: 0, y: 248.53))
        path2Path.close()
        path2Path.usesEvenOddFillRule = true
        context.saveGState()
        path2Path.addClip()
        context.drawLinearGradient(linearGradient,
            start: CGPoint(x: 187.5, y: 248.53),
            end: CGPoint(x: 187.5, y: 812.16),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 7
        context.saveGState()
        context.setAlpha(0.56)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// path-5 Drawing
        let path5Path = UIBezierPath()
        path5Path.move(to: CGPoint(x: 0, y: 248.66))
        path5Path.addCurve(to: CGPoint(x: 214.64, y: 226.44), controlPoint1: CGPoint(x: 108.68, y: 219.04), controlPoint2: CGPoint(x: 180.23, y: 211.63))
        path5Path.addCurve(to: CGPoint(x: 375, y: 248.66), controlPoint1: CGPoint(x: 249.06, y: 241.25), controlPoint2: CGPoint(x: 302.51, y: 248.66))
        path5Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path5Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path5Path.addLine(to: CGPoint(x: 0, y: 248.66))
        path5Path.close()
        path5Path.usesEvenOddFillRule = true
        context.saveGState()
        path5Path.addClip()
        context.drawLinearGradient(linearGradient3,
            start: CGPoint(x: 375, y: 812.16),
            end: CGPoint(x: 0, y: 219.04),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- 6 Drawing
        let path6Path = UIBezierPath()
        path6Path.move(to: CGPoint(x: 0, y: 248.66))
        path6Path.addCurve(to: CGPoint(x: 214.64, y: 226.44), controlPoint1: CGPoint(x: 108.68, y: 219.04), controlPoint2: CGPoint(x: 180.23, y: 211.63))
        path6Path.addCurve(to: CGPoint(x: 375, y: 248.66), controlPoint1: CGPoint(x: 249.06, y: 241.25), controlPoint2: CGPoint(x: 302.51, y: 248.66))
        path6Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path6Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path6Path.addLine(to: CGPoint(x: 0, y: 248.66))
        path6Path.close()
        path6Path.usesEvenOddFillRule = true
        context.saveGState()
        path6Path.addClip()
        context.drawLinearGradient(linearGradient,
            start: CGPoint(x: 187.5, y: 219.04),
            end: CGPoint(x: 187.5, y: 812.16),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 8
        context.saveGState()
        context.setAlpha(0.56)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// path- 7 Drawing
        let path7Path = UIBezierPath()
        path7Path.move(to: CGPoint(x: 0, y: 260.11))
        path7Path.addCurve(to: CGPoint(x: 0, y: 223.18), controlPoint1: CGPoint(x: 0, y: 253.49), controlPoint2: CGPoint(x: 0, y: 241.17))
        path7Path.addCurve(to: CGPoint(x: 77.54, y: 223.18), controlPoint1: CGPoint(x: 14.01, y: 214.55), controlPoint2: CGPoint(x: 55.95, y: 221.88))
        path7Path.addCurve(to: CGPoint(x: 254.13, y: 275.37), controlPoint1: CGPoint(x: 132.97, y: 226.5), controlPoint2: CGPoint(x: 193.91, y: 272.95))
        path7Path.addCurve(to: CGPoint(x: 375, y: 260.11), controlPoint1: CGPoint(x: 294.28, y: 276.98), controlPoint2: CGPoint(x: 334.57, y: 271.9))
        path7Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path7Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path7Path.addLine(to: CGPoint(x: 0, y: 260.11))
        path7Path.close()
        path7Path.usesEvenOddFillRule = true
        context.saveGState()
        path7Path.addClip()
        context.drawLinearGradient(linearGradient3,
            start: CGPoint(x: 375, y: 812.16),
            end: CGPoint(x: 0, y: 219.04),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// path- 8 Drawing
        let path8Path = UIBezierPath()
        path8Path.move(to: CGPoint(x: 0, y: 260.11))
        path8Path.addCurve(to: CGPoint(x: 0, y: 223.18), controlPoint1: CGPoint(x: 0, y: 253.49), controlPoint2: CGPoint(x: 0, y: 241.17))
        path8Path.addCurve(to: CGPoint(x: 77.54, y: 223.18), controlPoint1: CGPoint(x: 14.01, y: 214.55), controlPoint2: CGPoint(x: 55.95, y: 221.88))
        path8Path.addCurve(to: CGPoint(x: 254.13, y: 275.37), controlPoint1: CGPoint(x: 132.97, y: 226.5), controlPoint2: CGPoint(x: 193.91, y: 272.95))
        path8Path.addCurve(to: CGPoint(x: 375, y: 260.11), controlPoint1: CGPoint(x: 294.28, y: 276.98), controlPoint2: CGPoint(x: 334.57, y: 271.9))
        path8Path.addLine(to: CGPoint(x: 375, y: 812.16))
        path8Path.addLine(to: CGPoint(x: 0, y: 812.16))
        path8Path.addLine(to: CGPoint(x: 0, y: 260.11))
        path8Path.close()
        path8Path.usesEvenOddFillRule = true
        context.saveGState()
        path8Path.addClip()
        context.drawLinearGradient(linearGradient,
            start: CGPoint(x: 187.5, y: 219.04),
            end: CGPoint(x: 187.5, y: 812.16),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(BackgroundsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
